clear all
clc

%% Initialize some symbolic variables
syms U V W Phi Fx Fy Fz R omega omega_phase Press...
     f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12 f13 f14 f15 f16 f17 f18 f19...
     f20 f21 f22 f23 f24 f25 f26... 
     g0 g1 g2 g3 g4 g5 g6 g7 g8 g9 g10 g11 g12 g13 g14 g15 g16 g17 g18 g19...
     g20 g21 g22 g23 g24 g25 g26 real

%% Define lattice directions, weights and other useful quantities of the D3Q27 model
np = 27;
cx = [0, 1,-1, 0, 0, 0, 0, 1,-1, 1,-1, 1,-1, 1,-1, 0, 0, 0, 0, 1,-1, 1,...
      -1, 1,-1, 1,-1];
cy = [0, 0, 0, 1,-1, 0, 0, 1, 1,-1,-1, 0, 0, 0, 0, 1,-1, 1,-1, 1, 1, -1,...
      -1, 1, 1,-1,-1];
cz = [0, 0, 0, 0, 0, 1,-1, 0, 0, 0, 0, 1, 1,-1,-1, 1, 1,-1,-1, 1, 1, 1,...
      1,-1,-1,-1,-1];
w = [8/27, 2/27, 2/27, 2/27, 2/27, 2/27, 2/27, 1/54, 1/54, 1/54, 1/54,...
      1/54, 1/54, 1/54, 1/54, 1/54, 1/54, 1/54, 1/54, 1/216, 1/216,...
      1/216, 1/216, 1/216, 1/216, 1/216, 1/216];
cs = 1/sqrt(3);
cs2 = cs^2;
cs3 = cs^3;
cs4 = cs^4;
cs5 = cs^5;
cs6 = cs^6;
cs8 = cs^8;
cs10 = cs^10;
cs12 = cs^12;

f = [f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f11 f12 f13 f14 f15 f16 f17 f18 f19...
     f20 f21 f22 f23 f24 f25 f26]'; % hydrodynamic populations
feq = sym(zeros(np,1));
g = [g0 g1 g2 g3 g4 g5 g6 g7 g8 g9 g10 g11 g12 g13 g14 g15 g16 g17 g18 g19...
     g20 g21 g22 g23 g24 g25 g26]'; % phase populations
geq = sym(zeros(np,1));

Force = sym(zeros(np,1)); % generic force vector
T = sym(zeros(np,np)); %transformation matrix for central moments
M = zeros(np,np);  %transformation matrix for raw moments
K = diag([1, 1, 1, 1, omega, omega, omega, omega, omega, 1, 1, 1, 1,...
               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]); % relaxation matrices
K_phase = diag([1, omega_phase, omega_phase, omega_phase, 1, 1, 1,...
                     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);
Id = eye(np,np);
for i=1:np
    % build the complete equilibria
    first_order = U*cx(i)+V*cy(i)+W*cz(i);
    first_order = first_order/cs2;
    second_order = 4.5*(U*cx(i)+V*cy(i)+W*cz(i))^2-1.5*(U*U+V*V+W*W);
    third_order = (cx(i)^2-cs2)*cy(i)*U*U*V + (cx(i)^2-cs2)*cz(i)*U*U*W +...
                  (cy(i)^2-cs2)*cx(i)*U*V*V + (cz(i)^2-cs2)*cx(i)*U*W*W +...
                  (cz(i)^2-cs2)*cy(i)*V*W*W + (cy(i)^2-cs2)*cz(i)*V*V*W +...
              2*( cx(i)*cy(i)*cz(i)*U*V*W);  
    third_order = third_order/(2*cs6);
    fourth_order = (cx(i)^2-cs2)*(cy(i)^2-cs2)*U*U*V*V +...
                   (cx(i)^2-cs2)*(cz(i)^2-cs2)*U*U*W*W +...
                   (cy(i)^2-cs2)*(cz(i)^2-cs2)*V*V*W*W +...
                2*( cx(i)*cy(i)*(cz(i)^2-cs2)*U*V*W*W +...
                    cx(i)*(cy(i)^2-cs2)*cz(i)*U*V*V*W +...
                   (cx(i)^2-cs2)*cy(i)*cz(i)*U*U*V*W );
    fourth_order = fourth_order/(4*cs8);
    fifth_order = (cx(i)^2-cs2)*cy(i)*(cz(i)^2-cs2)*U*U*V*W*W +...
                  (cx(i)^2-cs2)*(cy(i)^2-cs2)*cz(i)*U*U*V*V*W +...
                  cx(i)*(cy(i)^2-cs2)*(cz(i)^2-cs2)*U*V*V*W*W;
    fifth_order = fifth_order/(4*cs10);
    sixth_order = (cx(i)^2-cs2)*(cy(i)^2-cs2)*(cz(i)^2-cs2)*U*U*V*V*W*W;
    sixth_order = sixth_order/(8*cs12);
    
    feq(i) = w(i)*(Press+first_order + second_order + third_order +...
                   fourth_order + fifth_order + sixth_order);
    geq(i) = Phi*w(i)*(1+first_order + second_order + third_order +...
                       fourth_order + fifth_order + sixth_order);
              
    % build the complete forcing terms
    hat_cx = cx(i)/cs;
    hat_cy = cy(i)/cs;
    hat_cz = cz(i)/cs;
    hat_ = [hat_cx, hat_cy, hat_cz];
    H1 = zeros(3,1);
    H2 = zeros(3,3);
    H3 = zeros(3,3,3);
    H4 = zeros(3,3,3,3);
    H5 = zeros(3,3,3,3,3);
    H6 = zeros(3,3,3,3,3,3);
    H1(1) = hat_cx;
    H1(2) = hat_cy;
    H1(3) = hat_cz;
    H2(1,1) = hat_cx^2-1;
    H2(1,2) = hat_cx*hat_cy;
    H2(1,3) = hat_cx*hat_cz;
    H2(2,1) = hat_cy*hat_cx;
    H2(2,2) = hat_cy^2-1;
    H2(2,3) = hat_cy*hat_cz;
    H2(3,1) = hat_cz*hat_cx;
    H2(3,2) = hat_cz*hat_cy;
    H2(3,3) = hat_cz^2-1;  
    H3(1,1,2) = (hat_cx^2-1)*hat_cy;
    H3(1,1,3) = (hat_cx^2-1)*hat_cz;
    H3(1,2,2) = hat_cx*(hat_cy^2-1);
    H3(1,3,3) = hat_cx*(hat_cz^2-1);
    H3(2,3,3) = hat_cy*(hat_cz^2-1);
    H3(2,2,3) = (hat_cy^2-1)*hat_cz;
    H3(1,2,3) = hat_cx*hat_cy*hat_cz;
    H3(2,3,1) = H3(1,2,3);
    H3(3,1,2) = H3(1,2,3);
    H4(1,1,2,2) = (hat_cx^2-1)*(hat_cy^2-1);
    H4(1,1,3,3) = (hat_cx^2-1)*(hat_cz^2-1);
    H4(2,2,3,3) = (hat_cy^2-1)*(hat_cz^2-1);
    H4(1,2,3,3) = hat_cx*hat_cy*(hat_cz^2-1);
    H4(1,2,2,3) = hat_cx*(hat_cy^2-1)*hat_cz;
    H4(1,1,2,3) = (hat_cx^2-1)*hat_cy*hat_cz;
    H5(1,1,2,3,3) = (hat_cx^2-1)*hat_cy*(hat_cz^2-1);
    H5(1,1,2,2,3) = (hat_cx^2-1)*(hat_cy^2-1)*hat_cz;
    H5(1,2,2,3,3) = hat_cx*(hat_cy^2-1)*(hat_cz^2-1);
    H6(1,1,2,2,3,3) = (hat_cx^2-1)*(hat_cy^2-1)*(hat_cz^2-1);
    first_order = (Fx*H1(1)+Fy*H1(2)+Fz*H1(3))/cs;
    second_order = 1/(2*cs2)*(H2(1,1)*(Fx*U+...
                                       U*Fx)+...
                              H2(2,2)*(Fy*V+...
                                       V*Fy)+... 
                              H2(3,3)*(Fz*W+...
                                       W*Fz)+...                                    
                            2*H2(1,2)*(Fx*V+...
                                       U*Fy)+...
                            2*H2(1,3)*(Fx*W+...
                                       U*Fz)+...
                            2*H2(2,3)*(Fy*W+...
                                       V*Fz) );
    third_order =  1/(6*cs3)*(3*H3(1,1,2)*(Fx*U*V+...
                                           U*Fx*V+...
                                           U*U*Fy)+...
                              3*H3(1,1,3)*(Fx*U*W+...
                                           U*Fx*W+...
                                           U*U*Fz)+...                         
                              3*H3(1,2,2)*(Fx*V*V+...
                                           U*Fy*V+...
                                           U*V*Fy)+... 
                              3*H3(1,3,3)*(Fx*W*W+...
                                           U*Fz*W+...
                                           U*W*Fz)+... 
                              3*H3(2,3,3)*(Fy*W*W+...
                                           V*Fz*W+...
                                           V*W*Fz)+... 
                              3*H3(2,2,3)*(Fy*V*W+...
                                           V*Fy*W+...
                                           V*V*Fz)+...
                              6*H3(1,2,3)*(Fx*V*W+...
                                           U*Fy*W+...
                                           U*V*Fz) );
    fourth_order = 1./(24*cs4)*(6*H4(1,1,2,2)*(Fx*U*V*V+...
                                               U*Fx*V*V+...
                                               U*U*Fy*V+...
                                               U*U*V*Fy)+...
                                6*H4(1,1,3,3)*(Fx*U*W*W+...
                                               U*Fx*W*W+...
                                               U*U*Fz*W+...
                                               U*U*W*Fz)+...
                                6*H4(2,2,3,3)*(Fy*V*W*W+...
                                               V*Fy*W*W+...
                                               V*V*Fz*W+...
                                               V*V*W*Fz)+...     
                               12*H4(1,2,3,3)*(Fx*V*W*W+...
                                               U*Fy*W*W+...
                                               U*V*Fz*W+...
                                               U*V*W*Fz)+...
                               12*H4(1,2,2,3)*(Fx*V*V*W+...
                                               U*Fy*V*W+...
                                               U*V*Fy*W+...
                                               U*V*V*Fz)+...
                               12*H4(1,1,2,3)*(Fx*U*V*W+...
                                               U*Fx*V*W+...
                                               U*U*Fy*W+...
                                               U*U*V*Fz) );
    fifth_order = 1./(120*cs5)*(30*H5(1,1,2,3,3)*(Fx*U*V*W*W+...
                                                  U*Fx*V*W*W+...
                                                  U*U*Fy*W*W+...
                                                  U*U*V*Fz*W+...
                                                  U*U*V*W*Fz)+...
                                30*H5(1,1,2,2,3)*(Fx*U*V*V*W+...
                                                  U*Fx*V*V*W+...
                                                  U*U*Fy*V*W+...
                                                  U*U*V*Fy*W+...
                                                  U*U*V*V*Fz)+...
                                30*H5(1,2,2,3,3)*(Fx*V*V*W*W+...
                                                  U*Fy*V*W*W+...
                                                  U*V*Fy*W*W+...
                                                  U*V*V*Fz*W+...
                                                  U*V*V*W*Fz) );
    sixth_order = 1./(720*cs6)*90*H6(1,1,2,2,3,3)*(Fx*U*V*V*W*W+...
                                                   U*Fx*V*V*W*W+...
                                                   U*U*Fy*V*W*W+...
                                                   U*U*V*Fy*W*W+...
                                                   U*U*V*V*Fz*W+...
                                                   U*U*V*V*W*Fz);
    Force(i) = w(i)*(first_order + second_order + third_order +...
                         fourth_order + fifth_order + sixth_order);
                     
    % build the transformation matrix T 
    CX = cx(i)-U;
    CY = cy(i)-V;
    CZ = cz(i)-W;
    CX2 = CX^2;
    CY2 = CY^2;
    CZ2 = CZ^2;
    T(1,i) = 1;
    T(2,i) = CX;
    T(3,i) = CY;
    T(4,i) = CZ;
    T(5,i) = CX*CY;
    T(6,i) = CX*CZ;
    T(7,i) = CY*CZ;
    T(8,i) = CX2-CY2;
    T(9,i) = CX2-CZ2;
    T(10,i) = CX2+CY2+CZ2;
    T(11,i) = CX*CY2+CX*CZ2;
    T(12,i) = CX2*CY+CY*CZ2;
    T(13,i) = CX2*CZ+CY2*CZ;
    T(14,i) = CX*CY2-CX*CZ2;
    T(15,i) = CX2*CY-CY*CZ2;
    T(16,i) = CX2*CZ-CY2*CZ;
    T(17,i) = CX*CY*CZ;
    T(18,i) = CX2*CY2+CX2*CZ2+CY2*CZ2;
    T(19,i) = CX2*CY2+CX2*CZ2-CY2*CZ2;
    T(20,i) = CX2*CY2-CX2*CZ2;
    T(21,i) = CX2*CY*CZ;
    T(22,i) = CX*CY2*CZ;
    T(23,i) = CX*CY*CZ2;
    T(24,i) = CX*CY2*CZ2;
    T(25,i) = CX2*CY*CZ2;
    T(26,i) = CX2*CY2*CZ;
    T(27,i) = CX2*CY2*CZ2;
    
    % build the transformation matrix M
    CX = cx(i);
    CY = cy(i);
    CZ = cz(i);
    CX2 = CX^2;
    CY2 = CY^2;
    CZ2 = CZ^2;
    M(1,i) = 1;
    M(2,i) = CX;
    M(3,i) = CY;
    M(4,i) = CZ;
    M(5,i) = CX*CY;
    M(6,i) = CX*CZ;
    M(7,i) = CY*CZ;
    M(8,i) = CX2-CY2;
    M(9,i) = CX2-CZ2;
    M(10,i) = CX2+CY2+CZ2;
    M(11,i) = CX*CY2+CX*CZ2;
    M(12,i) = CX2*CY+CY*CZ2;
    M(13,i) = CX2*CZ+CY2*CZ;
    M(14,i) = CX*CY2-CX*CZ2;
    M(15,i) = CX2*CY-CY*CZ2;
    M(16,i) = CX2*CZ-CY2*CZ;
    M(17,i) = CX*CY*CZ;
    M(18,i) = CX2*CY2+CX2*CZ2+CY2*CZ2;
    M(19,i) = CX2*CY2+CX2*CZ2-CY2*CZ2;
    M(20,i) = CX2*CY2-CX2*CZ2;
    M(21,i) = CX2*CY*CZ;
    M(22,i) = CX*CY2*CZ;
    M(23,i) = CX*CY*CZ2;
    M(24,i) = CX*CY2*CZ2;
    M(25,i) = CX2*CY*CZ2;
    M(26,i) = CX2*CY2*CZ;
    M(27,i) = CX2*CY2*CZ2;
end
T = simplify(T);
N = simplify(T*M^(-1)); %shift matrix

%% HYDRO
syms k0_pre k1_pre k2_pre k3_pre k4_pre k5_pre k6_pre k7_pre k8_pre k9_pre...
    k10_pre k11_pre k12_pre k13_pre k14_pre k15_pre k16_pre k17_pre k18_pre...
    k19_pre k20_pre k21_pre k22_pre k23_pre k24_pre k25_pre k26_pre real
syms k0_star k1_star k2_star k3_star k4_star k5_star k6_star k7_star k8_star k9_star...
    k10_star k11_star k12_star k13_star k14_star k15_star k16_star k17_star k18_star...
    k19_star k20_star k21_star k22_star k23_star k24_star k25_star k26_star real
k_pre = simplify(T*f); %pre-collision central moments
k_eq = simplify(T*feq); % equilibrium central moments
k_force = simplify(T*Force); % forcing term central moments
k_pre(5) = k4_pre;
k_pre(6) = k5_pre;
k_pre(7) = k6_pre;
k_pre(8) = k7_pre;
k_pre(9) = k8_pre;
k_star = simplify((Id-K)*k_pre + K*k_eq + (Id-K/2)*k_force) %post-collision central moments

%post-collision populations
k_sym = [Press k1_star k2_star k3_star k4_star k5_star k6_star k7_star k8_star k9_star...
         k10_star k11_star k12_star k13_star k14_star k15_star k16_star k17_star k18_star...
         k19_star k20_star k21_star k22_star k23_star k24_star k25_star k26_star];
for i=1:np
    if(k_star(i)~=sym(0))
        k_star(i) = k_sym(i);
    end
end
f_post_collision_onestep = collect(simplify(T \ k_star), k_star)

% two-steps approach
% raw_moments = simplify(N^(-1)*k_star)
% syms r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19...
%      r20 r21 r22 r23 r24 r25 r26 real
% r = [r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19...
%      r20 r21 r22 r23 r24 r25 r26]'; %symbolic raw moments
% f_post_collision_twosteps = collect(simplify(M\r),k_star)

%% PHASE
k_pre_g = simplify(T*g); %pre-collision central moments
k_eq_g = simplify(T*geq); % equilibrium central moments
k_force_g = simplify(T*Force); % forcing term central moments
k_pre_g(2) = k1_pre;
k_pre_g(3) = k2_pre;
k_pre_g(4) = k3_pre;
k_star_g = simplify((Id-K_phase)*k_pre_g + K_phase*k_eq_g + (Id-K_phase/2)*k_force_g ) %post-collision central moments

%post-collision populations
syms k1_g_star k2_g_star k3_g_star k4_g_star k5_g_star k6_g_star k7_g_star k8_g_star k9_g_star...
    k10_g_star k11_g_star k12_g_star k13_g_star k14_g_star k15_g_star k16_g_star k17_g_star k18_g_star...
    k19_g_star k20_g_star k21_g_star k22_g_star k23_g_star k24_g_star k25_g_star k26_g_star real
k_sym_g = [Phi k1_g_star k2_g_star k3_g_star k4_g_star k5_g_star k6_g_star k7_g_star k8_g_star k9_g_star...
    k10_g_star k11_g_star k12_g_star k13_g_star k14_g_star k15_g_star k16_g_star k17_g_star k18_g_star...
    k19_g_star k20_g_star k21_g_star k22_g_star k23_g_star k24_g_star k25_g_star k26_g_star];
for i=1:np
    if(k_star_g(i)~=sym(0))
        k_star_g(i) = k_sym_g(i);
    end
end
g_post_collision_onestep = collect(simplify(T \ k_star_g), k_star_g)

% two-steps approach
% raw_moments_g = simplify(N^(-1)*k_star_g)
% syms r0_g r1_g r2_g r3_g r4_g r5_g r6_g r7_g r8_g r9_g r10_g r11_g r12_g r13_g r14_g r15_g r16_g r17_g r18_g r19_g...
%      r20_g r21_g r22_g r23_g r24_g r25_g r26_g real
% r_g = [r0_g r1_g r2_g r3_g r4_g r5_g r6_g r7_g r8_g r9_g r10_g r11_g r12_g r13_g r14_g r15_g r16_g r17_g r18_g r19_g...
%      r20_g r21_g r22_g r23_g r24_g r25_g r26_g]'; %symbolic raw moments
% g_post_collision_twosteps = collect(simplify(M\r_g),k_star_g)
